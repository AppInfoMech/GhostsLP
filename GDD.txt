Versão 0.00 - Versão Base com as regras base e ideias inicias de como proceder com o projeto.
Versão 0.01 - Versão com a adição de uma secção de referências.
Versão 0.02 - Versão com a adição de uma secção de agradecimentos para contribuidores externos.




PASSOS:

Imprimir regras no ecrã (maybe)
2 JOGADORES (MAYBE PEDIR NOMES)
Dar print do mapa
Jogador 1 coloca um dos seus fantasmas no mapa (color coded por sala)
Jogador 2 coloca dois fantasmas no mapa
Jogadores tomam turnos a por fantasmas no mapa até todos os 18 (de cada) ficarem colocados.
Começa o jogo
Jogador A começa e a partir daí o jogo dá-se por turnos até um jogador ganhar.



Ações:

A)	Mover um fantasma para uma casa vazia. Numa “mirror chamber” pode-se ir para outra “mirror-chamber”. 
	Cor da casa já não importa. Não se pode mover diagonalmente.

B)	Lutar com um fantasma de uma casa adjacente. Move-se um fantasma para uma casa ocupada por outro e de
	acordo com cor a luta é resolvida imediatamente (red -> blue -> yellow -> red) e o perdedor vai pra a “dungeon”.
	Pode-se lutar com os próprios fantasmas, mas não se pode lutar com fantasmas da mesma cor. Não se pode mover diagonalmente.

C)	Libertar um fantasma da dungeon. Escolhe-se um fantasma e o oponente coloca-o em jogo na casa que desejar
	(color-coded). Não se pode libertar um fantasma caso não haja casas com a sua cor.



Portais:

Um fantasma pode sair do castelo apenas por um portal da sua cor, no entanto, não precisa de ser o turno deste para
	ele fugir caso surja uma oportunidade (ficar na casa com o portal virado para si). Sempre que um fantasma é derrotado,
	o portal da sua cor irá virar 90 graus no sentido do relógio (esquerda para a direita). Eliminar o fantasma que escapa do
	jogo, mas contabiliza-lo.



Condição de Vitória:

O jogo acaba quando um jogador tiver 1 (ou mais) fantasma de cada cor fora do castelo, ou seja, o primeiro jogador a fazer com que
um fantasma amarelo, um vermelho e um azul sejam libertados ganha.



Créditos Extra:

Após termos concluído este jogo, se houver tempo, o professor parece que dá pontos extra se tivermos um modo alternativo no qual
o primeiro jogador a libertar 3 fantasmas (quaisquer) ganha. Quando tivermos o jogo feito, não deve ser muito difícil pelo que
proponho fazermo-lo.


Referências:

	SLEEP -------------------------	https://www.dotnetperls.com/sleep
	IF/ELSE IF/ELSE ---------------	https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else
	BOOL --------------------------	https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/bool
	CLASS -------------------------	https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/keywords/class
	WHILE -------------------------	https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while
	OBJECT ORIENTED PROG ----------	https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/concepts/object-oriented-programming
	BOOLEAN LOGICAL OPER ---------- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators
	XML --------------------------- https://docs.microsoft.com/pt-br/dotnet/csharp/codedoc
	ENUMERATION ------------------- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum
	LOGICAL OPERATORS ------------- https://www.tutlane.com/tutorial/csharp/csharp-logical-operators-with-examples
	ARRAYS ------------------------ https://www.tutorialspoint.com/csharp/csharp_arrays.htm
	MULTIDIMENSIONAL ARRAYS ------- https://www.tutorialspoint.com/csharp/csharp_multi_dimensional_arrays.htm
	FOR --------------------------- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for
	GETTER-SETTER ----------------- https://stackoverflow.com/questions/17881091/getter-and-setter-declaration-in-net
	CLASS INHERITANCE-------------- https://exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/


Special Thanks to: 
	Lucas
	Rafael
	Guilherme

